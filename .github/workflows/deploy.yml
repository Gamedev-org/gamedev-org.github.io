# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

env:
  PULL_BRANCH: master
  PUSH_BRANCH: gh-pages
  GIT_USER: longshilin
  GIT_EMAIL: longshilin@users.noreply.github.com
  GIT_ADDRESS: git@github.com:Gamedev-org/gamedev-org.github.io.git

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v2
    # Python & Pip Installer
    - uses: actions/setup-python@v1
    - uses: dschep/install-pipenv-action@v1
    # prepare build env
    - name: prepare build env
      env:
        GH_ACTION_DEPLOY_KEY: ${{ secrets.GH_ACTION_DEPLOY_KEY }}
      run: |
        mkdir -p ~/.ssh/
        echo "$GH_ACTION_DEPLOY_KEY" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan github.com >> ~/.ssh/known_hosts
        git config --global user.name ${GIT_USER}
        git config --global user.email ${GIT_EMAIL}
        pip install mkdocs
        pip install mkdocs-bootswatch
        pip install mkdocs-foo-plugin
    # build and deploy
    - name: build 
      run: |
        git clone --branch ${PULL_BRANCH} ${GIT_ADDRESS} ${PULL_BRANCH};
        cd ${PULL_BRANCH}; mkdocs build; cd ..;
        git clone --branch ${PUSH_BRANCH} ${GIT_ADDRESS} ${PUSH_BRANCH}; 
        # mv -f ${PULL_BRANCH}/site/* ${PUSH_BRANCH};
        (cd ${PULL_BRANCH}/site && tar c .) | (cd ${PUSH_BRANCH} && tar xf -)
        cd ${PUSH_BRANCH}; git add *; git commit -a -m "Site updatedï¼š`date`"; git push -f;
